<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Gauche Users' Reference</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Script-Type" content="text/javascript">
<style type="text/css">
<!--
body {
    background-color: #253960;
    color: #ffffff;
}
body a {
    color: #88bbff;
}
body a:visited {
    color: #cc99ff;
}
#header_container {
    margin-top: 10px;
    margin-bottom: 10px;
}
#input_container {
    margin-top: 15px;
    margin-bottom: 12px;
    display: none;
}
#input_container form {
    margin: 0;
}
#result_table {
    width: 100%;
    margin: 0;
    padding-left: 0;
    border: none;
    display: none;
}
#result_table td {
    word-break: break-all;
}
-->
</style>
<script type="text/javascript">
<!--
var index_word_num = 0;        // 索引の単語の数
var index_word = [];           // 索引の単語(配列)
var index_word_node = [];      // 索引の単語のノード(配列)
var max_isearch_count = 200;   // 1回あたりの最大検索数
var now_isearch_pointer = 0;   // 現在の検索開始位置
var now_isearch_regexp = null; // 現在の正規表現オブジェクト
var first_result_url = "";     // 先頭の検索結果のURL
var old_makeinfo_flag = false; // 古い makeinfo v4.13 の対応用
var old_browser_flag = false;  // 古いブラウザ(IE8,IE9等)の対策用

// ***** 初期化 *****
window.onload = function () {
    var i;
    var node1, node2;

    // ***** 古いブラウザ(IE8,IE9等)の判定 *****
    old_browser_flag = !(typeof window.FileReader === "function");
    if (old_browser_flag) {
        // (検索機能を使用不可とする)
        return;
    }

    // ***** イベントハンドラ登録 *****
    node1 = document.getElementById("word");
    node1.addEventListener("keydown", keydown, false);
    node1.addEventListener("keyup",   keyup,   false);

    // ***** 索引の単語とノードを取得 *****
    node1 = document.getElementById("result_table");
    if (node1.tBodies) {
        node2 = node1.getElementsByTagName('tr');
        old_makeinfo_flag = false;
    } else {
        node2 = node1.getElementsByTagName('li');
        old_makeinfo_flag = true;
    }
    index_word_num = node2.length;
    index_word = [];
    index_word_node = [];
    for (i = 0; i < index_word_num; i++) {
        index_word[i] = node2[i].getElementsByTagName("code")[0].innerHTML;
        index_word_node[i] = node2[i];
    }

    // ***** 表示の初期化 *****
    document.getElementById("input_container").style.display = "block";
};

// ***** キー押し下げ *****
function keydown(ev) {
    var key_code;

    // ***** キーコードの取得 *****
    key_code = ev.keyCode;
    // ***** Enterキーのときは、先頭の検索結果のURLへジャンプ *****
    if (key_code == 13 && first_result_url != "") {
        parent.frame2.location.href = first_result_url;
    }
}

// ***** キー押し上げ *****
function keyup(ev) {
    var key_code;

    // ***** キーコードの取得 *****
    key_code = ev.keyCode;
    // ***** 矢印/PageUp/PageDown/Home/Endキーのときは抜ける *****
    if (key_code >= 33 && key_code <= 40) {
        return;
    }
    // ***** 検索遅延タイマをセット *****
    now_isearch_pointer = 0;
    setTimeout(exec_isearch, 10);
}

// ***** 検索実行 *****
function exec_isearch() {
    var i;
    var word, node1;
    var space_flag1, space_flag2;

    // ***** 単語を取得して、正規表現オブジェクトを生成する *****
    if (now_isearch_pointer == 0) {
        document.getElementById("result_table").style.display = "none";
        first_result_url = "";
        word = document.getElementById("word").value;
        word = word.replace(/([.*+?\^=!:${}()|\[\]\/\\])/g, "\\$1"); // 特殊文字の無効化
        word = escape_html(word);                                    // HTML文字列のエスケープ処理
        space_flag1 = (word.charAt(0) == " ");                       // 先頭の空白チェック
        space_flag2 = (word.charAt(word.length - 1) == " ");         // 末尾の空白チェック
        word = word.replace(/(^\s+)|(\s+$)/g, "");                   // 前後の空白を削除
        if (word != "") {
            if (space_flag1) { word = "^" + word; }
            if (space_flag2) { word = word + "$"; }
            now_isearch_regexp = new RegExp(word, "i");
        } else {
            // (単語が空なら抜ける)
            now_isearch_regexp = null;
            return;
        }
    }

    // ***** 検索を実行してヒットした行のみを表示する *****
    for (i = now_isearch_pointer; i < index_word_num; i++) {
        // (1回あたりの最大検索数を超えたら続きを次回にまわす)
        if (i >= now_isearch_pointer + max_isearch_count) {
            break;
        }
        if (index_word[i].match(now_isearch_regexp)) {
            if (old_makeinfo_flag) {
                index_word_node[i].style.display = "block";
            } else {
                index_word_node[i].style.display = "table-row";
            }
            if (first_result_url == "") {
                node1 = index_word_node[i].getElementsByTagName("a")[0];
                if (node1) {
                    first_result_url = node1.href;
                }
            }
        } else {
            index_word_node[i].style.display = "none";
        }
    }

    // ***** 検索終了のチェック *****
    if (i < index_word_num) {
        // ***** 検索遅延タイマをセット *****
        now_isearch_pointer += max_isearch_count;
        setTimeout(exec_isearch, 10);
    } else {
        if (old_makeinfo_flag) {
            document.getElementById("result_table").style.display = "block";
        } else {
            document.getElementById("result_table").style.display = "table";
        }
    }
}

// ***** HTML文字列のエスケープ処理 *****
function escape_html(html_st) {
    return html_st
        .replace(/&/g,   "&amp;")
        .replace(/[<]/g, "&lt;")
        .replace(/>/g,   "&gt;")
        .replace(/"/g,   "&quot;")
        .replace(/'/g,   "&#39;");
}

// -->
</script>
</head>

<body>
<div id="header_container">
<a target="frame2" href="#Top1000">[Top]</a>
<a target="frame2" href="#Contents1000">[Contents]</a>
<a target="frame2" href="#Index1000">[Index]</a>
</div>
<div id="input_container">
<form action="#" onsubmit="return false;">
<b>Search : </b><input type="text" id="word" value="">
</form>
</div>
<!-- index-data -->
</body>
</html>
